{ lib, writeScriptBin, writeText, mktemp, nix, maven }:

let
  name = "mvnix";
  version = "0.0.1";
  gen-header = "# This file has been generated by ${name} ${version}. Do not edit!";
  default-tmpl = writeText "default-tmpl.nix" ''
    ${gen-header}
    { pkgs ? import <nixpkgs> { inherit system; }
    , system ? builtins.currentSystem
    , maven ? pkgs.maven
    , config ? {}
    }:

    let
      mavenEnv = import ./maven-env.nix {
        inherit (pkgs)
          stdenv lib runCommand writeText fetchurl makeWrapper requireFile;
        inherit maven;
      };
      configs = import ./%%input%% ({ inherit pkgs; } // config);
    in
      mavenEnv.buildMaven (configs // {
        src = ./%%src%%;
        infoFile = ./maven-info.json;
      })
  '';
  shell-tmpl = writeText "shell-tmpl.nix" ''
    ${gen-header}
    { pkgs ? import <nixpkgs> { inherit system; }
    , system ? builtins.currentSystem
    }:

    pkgs.stdenv.mkDerivation {
      inherit (import ./%%input%% { inherit pkgs; }) buildInputs;
      name = "${name}-shell";
    }
  '';
in writeScriptBin "mvnix" (''
  #! /bin/bash
  set -e

  usage() {
    test "$1" && echo -e Error: $1\\n || echo -n
    cat <<EOF
    Usage: $(basename $0) [OPTIONS] <NIX-FILE>

    OPTIONS
      --settings|-s <path>    Maven settings.xml file
      --output|-o <dir>       Generated nix files output directory
  EOF
    exit 1
  }

  mvn_() {
    if test "$settings"; then
      ${maven}/bin/mvn -nsu --settings "$settings" "$@"
    else
      ${maven}/bin/mvn -nsu "$@"
    fi
  }
  export -f mvn_

  tmpl() { sed "s|%%$1%%|$2|g"; }

  # Default values
  outputDir="./"
  buildArgs=""

  # Parse CLI arguments
  while test $1;do
    case $1 in
      -o|--output) outputDir="$2";shift 2;;
      -s|--settings) settings="$2";shift 2;;
      --arg) buildArgs="$buildArgs\"$2\" = ($3);";shift 3;;
      -d|--debug) set -x;shift;;
      -*) usage;;
      *) input="$1";shift;;
    esac
  done

  test "$input"        || usage "No nix file given as input"
  test -f "$input"     || usage "\"$input\" is not a file"
  test -d "$outputDir" || usage "\"$outputDir\" is not a directory"

  relInput="$(realpath --relative-to="$outputDir" "$input")"
  relSrc="$(realpath --relative-to="$outputDir" ".")"
  output="$outputDir/maven-info.json"

  initRepo=$(${nix}/bin/nix-build --no-out-link -E "
  let pkgs = import <nixpkgs> {}; in (
    pkgs.callPackage (import ${./maven-env.nix}) {}
  ).mkRepo (import ./$input {$buildArgs}).drvs []")

  TMP_REPO="$(${mktemp}/bin/mktemp -d --tmpdir mavenix-m2-repo.XXXXXX)"
  cleanup() {
    rm -rf "$TMP_REPO" || echo -n
  }
  trap "trap - TERM; cleanup; kill -- $$" EXIT INT TERM

  cp -rf $initRepo/* $TMP_REPO || echo -n
  chmod -R +w "$TMP_REPO" || echo >&2 Failed to set chmod on temp repo dir.
'' + (builtins.readFile ./mkinfo.sh) + ''
  (echo -e "${gen-header}"\n;cat ${./maven-env.nix}) > "$outputDir/maven-env.nix"
  (cat ${default-tmpl} | tmpl input "$relInput" | tmpl src "$relSrc") > "$outputDir/default.nix"
  (cat ${shell-tmpl} | tmpl input "$relInput") > "$outputDir/shell.nix"
'')
